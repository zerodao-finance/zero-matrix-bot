/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class ExternalObject<T> {
  readonly '': {
    readonly '': unique symbol
    [K: symbol]: T
  }
}
export function encryptFile(data: string): string
export function decryptFile(payload: string): string
export interface Device {
  userId: string
  deviceId: string
  keys: Record<string, any>
  algorithms: Array<string>
  displayName?: string | undefined | null
  isBlocked: boolean
  locallyTrusted: boolean
  crossSigningTrusted: boolean
}
export interface DeviceLists {
  changed: Array<string>
  left: Array<string>
}
/** An event that was successfully decrypted. */
export interface DecryptedEvent {
  /** The decrypted version of the event. */
  clearEvent: string
  /** The claimed curve25519 key of the sender. */
  senderCurve25519Key: string
  /** The claimed ed25519 key of the sender. */
  claimedEd25519Key?: string | undefined | null
  /**
   * The curve25519 chain of the senders that forwarded the Megolm decryption
   * key to us. Is empty if the key came directly from the sender of the
   * event.
   */
  forwardingCurve25519Chain: Array<string>
}
export const enum RequestKind {
  KeysUpload = 1,
  KeysQuery = 2,
  ToDevice = 3,
  SignatureUpload = 4,
  RoomMessage = 5,
  KeysClaim = 6,
  KeysBackup = 7
}
export class SledBackedOlmMachine {
  constructor(userId: string, deviceId: string, sledPath: string)
  get userId(): string
  get deviceId(): string
  get deviceDisplayName(): string | undefined | null
  get identityKeys(): Record<string, any>
  get outgoingRequests(): Array<string>
  getDevice(userId: string, deviceId: string): Device | undefined | null
  getUserDevices(userId: string): Array<Device>
  markRequestAsSent(requestId: string, requestKind: RequestKind, responseBody: string): void
  receiveSyncChanges(events: string, deviceChanges: DeviceLists, keyCounts: Record<string, any>, unusedFallbackKeys?: Array<string> | undefined | null): string
  updateTrackedUsers(users: Array<string>): void
  isUserTracked(userId: string): boolean
  getMissingSessions(users: Array<string>): string
  shareRoomKey(roomId: string, userIds: Array<string>): Array<string>
  encrypt(roomId: string, eventType: string, content: string): string
  decryptRoomEvent(event: string, roomId: string): DecryptedEvent
  sign(message: string): string
}
